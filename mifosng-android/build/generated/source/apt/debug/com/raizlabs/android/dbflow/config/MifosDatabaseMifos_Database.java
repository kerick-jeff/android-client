package com.raizlabs.android.dbflow.config;

import com.mifos.api.local.MifosDatabase;
import com.mifos.objects.PaymentTypeOption;
import com.mifos.objects.PaymentTypeOption_Adapter;
import com.mifos.objects.PaymentTypeOption_Container;
import com.mifos.objects.accounts.loan.ActualDisbursementDate;
import com.mifos.objects.accounts.loan.ActualDisbursementDate_Adapter;
import com.mifos.objects.accounts.loan.ActualDisbursementDate_Container;
import com.mifos.objects.accounts.loan.LoanAccount;
import com.mifos.objects.accounts.loan.LoanAccount_Adapter;
import com.mifos.objects.accounts.loan.LoanAccount_Container;
import com.mifos.objects.accounts.loan.LoanRepaymentRequest;
import com.mifos.objects.accounts.loan.LoanRepaymentRequest_Adapter;
import com.mifos.objects.accounts.loan.LoanRepaymentRequest_Container;
import com.mifos.objects.accounts.loan.LoanType;
import com.mifos.objects.accounts.loan.LoanType_Adapter;
import com.mifos.objects.accounts.loan.LoanType_Container;
import com.mifos.objects.accounts.loan.LoanWithAssociations;
import com.mifos.objects.accounts.loan.LoanWithAssociations_Adapter;
import com.mifos.objects.accounts.loan.LoanWithAssociations_Container;
import com.mifos.objects.accounts.loan.Status;
import com.mifos.objects.accounts.loan.Status_Adapter;
import com.mifos.objects.accounts.loan.Status_Container;
import com.mifos.objects.accounts.loan.Summary;
import com.mifos.objects.accounts.loan.Summary_Adapter;
import com.mifos.objects.accounts.loan.Summary_Container;
import com.mifos.objects.accounts.loan.Timeline;
import com.mifos.objects.accounts.loan.Timeline_Adapter;
import com.mifos.objects.accounts.loan.Timeline_Container;
import com.mifos.objects.accounts.savings.Currency;
import com.mifos.objects.accounts.savings.Currency_Adapter;
import com.mifos.objects.accounts.savings.Currency_Container;
import com.mifos.objects.accounts.savings.DepositType;
import com.mifos.objects.accounts.savings.DepositType_Adapter;
import com.mifos.objects.accounts.savings.DepositType_Container;
import com.mifos.objects.accounts.savings.SavingsAccount;
import com.mifos.objects.accounts.savings.SavingsAccountTransactionRequest;
import com.mifos.objects.accounts.savings.SavingsAccountTransactionRequest_Adapter;
import com.mifos.objects.accounts.savings.SavingsAccountTransactionRequest_Container;
import com.mifos.objects.accounts.savings.SavingsAccountWithAssociations;
import com.mifos.objects.accounts.savings.SavingsAccountWithAssociations_Adapter;
import com.mifos.objects.accounts.savings.SavingsAccountWithAssociations_Container;
import com.mifos.objects.accounts.savings.SavingsAccount_Adapter;
import com.mifos.objects.accounts.savings.SavingsAccount_Container;
import com.mifos.objects.accounts.savings.SavingsTransactionDate;
import com.mifos.objects.accounts.savings.SavingsTransactionDate_Adapter;
import com.mifos.objects.accounts.savings.SavingsTransactionDate_Container;
import com.mifos.objects.accounts.savings.Transaction;
import com.mifos.objects.accounts.savings.TransactionType;
import com.mifos.objects.accounts.savings.TransactionType_Adapter;
import com.mifos.objects.accounts.savings.TransactionType_Container;
import com.mifos.objects.accounts.savings.Transaction_Adapter;
import com.mifos.objects.accounts.savings.Transaction_Container;
import com.mifos.objects.client.ChargeCalculationType;
import com.mifos.objects.client.ChargeCalculationType_Adapter;
import com.mifos.objects.client.ChargeCalculationType_Container;
import com.mifos.objects.client.ChargeTimeType;
import com.mifos.objects.client.ChargeTimeType_Adapter;
import com.mifos.objects.client.ChargeTimeType_Container;
import com.mifos.objects.client.Charges;
import com.mifos.objects.client.Charges_Adapter;
import com.mifos.objects.client.Charges_Container;
import com.mifos.objects.client.Client;
import com.mifos.objects.client.ClientDate;
import com.mifos.objects.client.ClientDate_Adapter;
import com.mifos.objects.client.ClientDate_Container;
import com.mifos.objects.client.ClientPayload;
import com.mifos.objects.client.ClientPayload_Adapter;
import com.mifos.objects.client.ClientPayload_Container;
import com.mifos.objects.client.Client_Adapter;
import com.mifos.objects.client.Client_Container;
import com.mifos.objects.group.Center;
import com.mifos.objects.group.Center_Adapter;
import com.mifos.objects.group.Center_Container;
import com.mifos.objects.group.Group;
import com.mifos.objects.group.GroupDate;
import com.mifos.objects.group.GroupDate_Adapter;
import com.mifos.objects.group.GroupDate_Container;
import com.mifos.objects.group.GroupPayload;
import com.mifos.objects.group.GroupPayload_Adapter;
import com.mifos.objects.group.GroupPayload_Container;
import com.mifos.objects.group.Group_Adapter;
import com.mifos.objects.group.Group_Container;
import com.mifos.objects.organisation.Office;
import com.mifos.objects.organisation.OfficeOpeningDate;
import com.mifos.objects.organisation.OfficeOpeningDate_Adapter;
import com.mifos.objects.organisation.OfficeOpeningDate_Container;
import com.mifos.objects.organisation.Office_Adapter;
import com.mifos.objects.organisation.Office_Container;
import com.mifos.objects.organisation.Staff;
import com.mifos.objects.organisation.Staff_Adapter;
import com.mifos.objects.organisation.Staff_Container;
import com.mifos.objects.templates.clients.ClientsTemplate;
import com.mifos.objects.templates.clients.ClientsTemplate_Adapter;
import com.mifos.objects.templates.clients.ClientsTemplate_Container;
import com.mifos.objects.templates.clients.InterestType;
import com.mifos.objects.templates.clients.InterestType_Adapter;
import com.mifos.objects.templates.clients.InterestType_Container;
import com.mifos.objects.templates.clients.OfficeOptions;
import com.mifos.objects.templates.clients.OfficeOptions_Adapter;
import com.mifos.objects.templates.clients.OfficeOptions_Container;
import com.mifos.objects.templates.clients.Options;
import com.mifos.objects.templates.clients.Options_Adapter;
import com.mifos.objects.templates.clients.Options_Container;
import com.mifos.objects.templates.clients.SavingProductOptions;
import com.mifos.objects.templates.clients.SavingProductOptions_Adapter;
import com.mifos.objects.templates.clients.SavingProductOptions_Container;
import com.mifos.objects.templates.clients.StaffOptions;
import com.mifos.objects.templates.clients.StaffOptions_Adapter;
import com.mifos.objects.templates.clients.StaffOptions_Container;
import com.mifos.objects.templates.loans.LoanRepaymentTemplate;
import com.mifos.objects.templates.loans.LoanRepaymentTemplate_Adapter;
import com.mifos.objects.templates.loans.LoanRepaymentTemplate_Container;
import com.mifos.objects.templates.savings.SavingsAccountTransactionTemplate;
import com.mifos.objects.templates.savings.SavingsAccountTransactionTemplate_Adapter;
import com.mifos.objects.templates.savings.SavingsAccountTransactionTemplate_Container;
import java.lang.Class;
import java.lang.Override;
import java.lang.String;

/**
 * This is generated code. Please do not modify */
public final class MifosDatabaseMifos_Database extends DatabaseDefinition {
  public MifosDatabaseMifos_Database(DatabaseHolder holder) {
    holder.putDatabaseForTable(LoanType.class, this);
    holder.putDatabaseForTable(LoanWithAssociations.class, this);
    holder.putDatabaseForTable(Client.class, this);
    holder.putDatabaseForTable(Currency.class, this);
    holder.putDatabaseForTable(Staff.class, this);
    holder.putDatabaseForTable(ClientsTemplate.class, this);
    holder.putDatabaseForTable(GroupPayload.class, this);
    holder.putDatabaseForTable(Status.class, this);
    holder.putDatabaseForTable(LoanRepaymentTemplate.class, this);
    holder.putDatabaseForTable(SavingsAccountWithAssociations.class, this);
    holder.putDatabaseForTable(SavingsAccount.class, this);
    holder.putDatabaseForTable(OfficeOpeningDate.class, this);
    holder.putDatabaseForTable(Charges.class, this);
    holder.putDatabaseForTable(TransactionType.class, this);
    holder.putDatabaseForTable(Summary.class, this);
    holder.putDatabaseForTable(Center.class, this);
    holder.putDatabaseForTable(ClientPayload.class, this);
    holder.putDatabaseForTable(ChargeCalculationType.class, this);
    holder.putDatabaseForTable(SavingsAccountTransactionTemplate.class, this);
    holder.putDatabaseForTable(LoanAccount.class, this);
    holder.putDatabaseForTable(OfficeOptions.class, this);
    holder.putDatabaseForTable(ClientDate.class, this);
    holder.putDatabaseForTable(Office.class, this);
    holder.putDatabaseForTable(com.mifos.objects.client.Status.class, this);
    holder.putDatabaseForTable(GroupDate.class, this);
    holder.putDatabaseForTable(ActualDisbursementDate.class, this);
    holder.putDatabaseForTable(Group.class, this);
    holder.putDatabaseForTable(StaffOptions.class, this);
    holder.putDatabaseForTable(com.mifos.objects.client.Currency.class, this);
    holder.putDatabaseForTable(PaymentTypeOption.class, this);
    holder.putDatabaseForTable(SavingProductOptions.class, this);
    holder.putDatabaseForTable(Timeline.class, this);
    holder.putDatabaseForTable(ChargeTimeType.class, this);
    holder.putDatabaseForTable(com.mifos.objects.accounts.savings.Summary.class, this);
    holder.putDatabaseForTable(SavingsTransactionDate.class, this);
    holder.putDatabaseForTable(Transaction.class, this);
    holder.putDatabaseForTable(Options.class, this);
    holder.putDatabaseForTable(com.mifos.objects.accounts.savings.Status.class, this);
    holder.putDatabaseForTable(SavingsAccountTransactionRequest.class, this);
    holder.putDatabaseForTable(InterestType.class, this);
    holder.putDatabaseForTable(LoanRepaymentRequest.class, this);
    holder.putDatabaseForTable(DepositType.class, this);
    models.add(LoanType.class);
    modelTableNames.put("LoanAccountLoanType", LoanType.class);
    modelAdapters.put(LoanType.class, new LoanType_Adapter(holder, this));
    modelContainerAdapters.put(LoanType.class, new LoanType_Container(holder, this));
    models.add(LoanWithAssociations.class);
    modelTableNames.put("LoanWithAssociations", LoanWithAssociations.class);
    modelAdapters.put(LoanWithAssociations.class, new LoanWithAssociations_Adapter(holder, this));
    modelContainerAdapters.put(LoanWithAssociations.class, new LoanWithAssociations_Container(holder, this));
    models.add(Client.class);
    modelTableNames.put("Client", Client.class);
    modelAdapters.put(Client.class, new Client_Adapter(holder, this));
    modelContainerAdapters.put(Client.class, new Client_Container(holder, this));
    models.add(Currency.class);
    modelTableNames.put("SavingAccountCurrency", Currency.class);
    modelAdapters.put(Currency.class, new Currency_Adapter(holder, this));
    modelContainerAdapters.put(Currency.class, new Currency_Container(holder, this));
    models.add(Staff.class);
    modelTableNames.put("Staff", Staff.class);
    modelAdapters.put(Staff.class, new Staff_Adapter(holder, this));
    modelContainerAdapters.put(Staff.class, new Staff_Container(holder, this));
    models.add(ClientsTemplate.class);
    modelTableNames.put("ClientsTemplate", ClientsTemplate.class);
    modelAdapters.put(ClientsTemplate.class, new ClientsTemplate_Adapter(holder, this));
    modelContainerAdapters.put(ClientsTemplate.class, new ClientsTemplate_Container(holder, this));
    models.add(GroupPayload.class);
    modelTableNames.put("GroupPayload", GroupPayload.class);
    modelAdapters.put(GroupPayload.class, new GroupPayload_Adapter(holder, this));
    modelContainerAdapters.put(GroupPayload.class, new GroupPayload_Container(holder, this));
    models.add(Status.class);
    modelTableNames.put("LoanStatus", Status.class);
    modelAdapters.put(Status.class, new Status_Adapter(holder, this));
    modelContainerAdapters.put(Status.class, new Status_Container(holder, this));
    models.add(LoanRepaymentTemplate.class);
    modelTableNames.put("LoanRepaymentTemplate", LoanRepaymentTemplate.class);
    modelAdapters.put(LoanRepaymentTemplate.class, new LoanRepaymentTemplate_Adapter(holder, this));
    modelContainerAdapters.put(LoanRepaymentTemplate.class, new LoanRepaymentTemplate_Container(holder, this));
    models.add(SavingsAccountWithAssociations.class);
    modelTableNames.put("SavingsAccountWithAssociations", SavingsAccountWithAssociations.class);
    modelAdapters.put(SavingsAccountWithAssociations.class, new SavingsAccountWithAssociations_Adapter(holder, this));
    modelContainerAdapters.put(SavingsAccountWithAssociations.class, new SavingsAccountWithAssociations_Container(holder, this));
    models.add(SavingsAccount.class);
    modelTableNames.put("SavingsAccount", SavingsAccount.class);
    modelAdapters.put(SavingsAccount.class, new SavingsAccount_Adapter(holder, this));
    modelContainerAdapters.put(SavingsAccount.class, new SavingsAccount_Container(holder, this));
    models.add(OfficeOpeningDate.class);
    modelTableNames.put("OfficeOpeningDate", OfficeOpeningDate.class);
    modelAdapters.put(OfficeOpeningDate.class, new OfficeOpeningDate_Adapter(holder, this));
    modelContainerAdapters.put(OfficeOpeningDate.class, new OfficeOpeningDate_Container(holder, this));
    models.add(Charges.class);
    modelTableNames.put("Charges", Charges.class);
    modelAdapters.put(Charges.class, new Charges_Adapter(holder, this));
    modelContainerAdapters.put(Charges.class, new Charges_Container(holder, this));
    models.add(TransactionType.class);
    modelTableNames.put("TransactionType", TransactionType.class);
    modelAdapters.put(TransactionType.class, new TransactionType_Adapter(holder, this));
    modelContainerAdapters.put(TransactionType.class, new TransactionType_Container(holder, this));
    models.add(Summary.class);
    modelTableNames.put("LoansAccountSummary", Summary.class);
    modelAdapters.put(Summary.class, new Summary_Adapter(holder, this));
    modelContainerAdapters.put(Summary.class, new Summary_Container(holder, this));
    models.add(Center.class);
    modelTableNames.put("Center", Center.class);
    modelAdapters.put(Center.class, new Center_Adapter(holder, this));
    modelContainerAdapters.put(Center.class, new Center_Container(holder, this));
    models.add(ClientPayload.class);
    modelTableNames.put("ClientPayload", ClientPayload.class);
    modelAdapters.put(ClientPayload.class, new ClientPayload_Adapter(holder, this));
    modelContainerAdapters.put(ClientPayload.class, new ClientPayload_Container(holder, this));
    models.add(ChargeCalculationType.class);
    modelTableNames.put("ChargeCalculationType", ChargeCalculationType.class);
    modelAdapters.put(ChargeCalculationType.class, new ChargeCalculationType_Adapter(holder, this));
    modelContainerAdapters.put(ChargeCalculationType.class, new ChargeCalculationType_Container(holder, this));
    models.add(SavingsAccountTransactionTemplate.class);
    modelTableNames.put("SavingsAccountTransactionTemplate", SavingsAccountTransactionTemplate.class);
    modelAdapters.put(SavingsAccountTransactionTemplate.class, new SavingsAccountTransactionTemplate_Adapter(holder, this));
    modelContainerAdapters.put(SavingsAccountTransactionTemplate.class, new SavingsAccountTransactionTemplate_Container(holder, this));
    models.add(LoanAccount.class);
    modelTableNames.put("LoanAccount", LoanAccount.class);
    modelAdapters.put(LoanAccount.class, new LoanAccount_Adapter(holder, this));
    modelContainerAdapters.put(LoanAccount.class, new LoanAccount_Container(holder, this));
    models.add(OfficeOptions.class);
    modelTableNames.put("ClientTemplateOfficeOptions", OfficeOptions.class);
    modelAdapters.put(OfficeOptions.class, new OfficeOptions_Adapter(holder, this));
    modelContainerAdapters.put(OfficeOptions.class, new OfficeOptions_Container(holder, this));
    models.add(ClientDate.class);
    modelTableNames.put("ClientDate", ClientDate.class);
    modelAdapters.put(ClientDate.class, new ClientDate_Adapter(holder, this));
    modelContainerAdapters.put(ClientDate.class, new ClientDate_Container(holder, this));
    models.add(Office.class);
    modelTableNames.put("Office", Office.class);
    modelAdapters.put(Office.class, new Office_Adapter(holder, this));
    modelContainerAdapters.put(Office.class, new Office_Container(holder, this));
    models.add(com.mifos.objects.client.Status.class);
    modelTableNames.put("Status", com.mifos.objects.client.Status.class);
    modelAdapters.put(com.mifos.objects.client.Status.class, new com.mifos.objects.client.Status_Adapter(holder, this));
    models.add(GroupDate.class);
    modelTableNames.put("GroupDate", GroupDate.class);
    modelAdapters.put(GroupDate.class, new GroupDate_Adapter(holder, this));
    modelContainerAdapters.put(GroupDate.class, new GroupDate_Container(holder, this));
    models.add(ActualDisbursementDate.class);
    modelTableNames.put("ActualDisbursementDate", ActualDisbursementDate.class);
    modelAdapters.put(ActualDisbursementDate.class, new ActualDisbursementDate_Adapter(holder, this));
    modelContainerAdapters.put(ActualDisbursementDate.class, new ActualDisbursementDate_Container(holder, this));
    models.add(Group.class);
    modelTableNames.put("Group", Group.class);
    modelAdapters.put(Group.class, new Group_Adapter(holder, this));
    modelContainerAdapters.put(Group.class, new Group_Container(holder, this));
    models.add(StaffOptions.class);
    modelTableNames.put("ClientTemplateStaffOptions", StaffOptions.class);
    modelAdapters.put(StaffOptions.class, new StaffOptions_Adapter(holder, this));
    modelContainerAdapters.put(StaffOptions.class, new StaffOptions_Container(holder, this));
    models.add(com.mifos.objects.client.Currency.class);
    modelTableNames.put("ClientChargeCurrency", com.mifos.objects.client.Currency.class);
    modelAdapters.put(com.mifos.objects.client.Currency.class, new com.mifos.objects.client.Currency_Adapter(holder, this));
    modelContainerAdapters.put(com.mifos.objects.client.Currency.class, new com.mifos.objects.client.Currency_Container(holder, this));
    models.add(PaymentTypeOption.class);
    modelTableNames.put("PaymentTypeOption", PaymentTypeOption.class);
    modelAdapters.put(PaymentTypeOption.class, new PaymentTypeOption_Adapter(holder, this));
    modelContainerAdapters.put(PaymentTypeOption.class, new PaymentTypeOption_Container(holder, this));
    models.add(SavingProductOptions.class);
    modelTableNames.put("ClientTemplateSavingProductsOptions", SavingProductOptions.class);
    modelAdapters.put(SavingProductOptions.class, new SavingProductOptions_Adapter(holder, this));
    modelContainerAdapters.put(SavingProductOptions.class, new SavingProductOptions_Container(holder, this));
    models.add(Timeline.class);
    modelTableNames.put("Timeline", Timeline.class);
    modelAdapters.put(Timeline.class, new Timeline_Adapter(holder, this));
    modelContainerAdapters.put(Timeline.class, new Timeline_Container(holder, this));
    models.add(ChargeTimeType.class);
    modelTableNames.put("ChargeTimeType", ChargeTimeType.class);
    modelAdapters.put(ChargeTimeType.class, new ChargeTimeType_Adapter(holder, this));
    modelContainerAdapters.put(ChargeTimeType.class, new ChargeTimeType_Container(holder, this));
    models.add(com.mifos.objects.accounts.savings.Summary.class);
    modelTableNames.put("SavingsAccountSummary", com.mifos.objects.accounts.savings.Summary.class);
    modelAdapters.put(com.mifos.objects.accounts.savings.Summary.class, new com.mifos.objects.accounts.savings.Summary_Adapter(holder, this));
    modelContainerAdapters.put(com.mifos.objects.accounts.savings.Summary.class, new com.mifos.objects.accounts.savings.Summary_Container(holder, this));
    models.add(SavingsTransactionDate.class);
    modelTableNames.put("SavingsTransactionDate", SavingsTransactionDate.class);
    modelAdapters.put(SavingsTransactionDate.class, new SavingsTransactionDate_Adapter(holder, this));
    modelContainerAdapters.put(SavingsTransactionDate.class, new SavingsTransactionDate_Container(holder, this));
    models.add(Transaction.class);
    modelTableNames.put("Transaction", Transaction.class);
    modelAdapters.put(Transaction.class, new Transaction_Adapter(holder, this));
    modelContainerAdapters.put(Transaction.class, new Transaction_Container(holder, this));
    models.add(Options.class);
    modelTableNames.put("ClientTemplateOptions", Options.class);
    modelAdapters.put(Options.class, new Options_Adapter(holder, this));
    modelContainerAdapters.put(Options.class, new Options_Container(holder, this));
    models.add(com.mifos.objects.accounts.savings.Status.class);
    modelTableNames.put("SavingsAccountStatus", com.mifos.objects.accounts.savings.Status.class);
    modelAdapters.put(com.mifos.objects.accounts.savings.Status.class, new com.mifos.objects.accounts.savings.Status_Adapter(holder, this));
    modelContainerAdapters.put(com.mifos.objects.accounts.savings.Status.class, new com.mifos.objects.accounts.savings.Status_Container(holder, this));
    models.add(SavingsAccountTransactionRequest.class);
    modelTableNames.put("SavingsAccountTransactionRequest", SavingsAccountTransactionRequest.class);
    modelAdapters.put(SavingsAccountTransactionRequest.class, new SavingsAccountTransactionRequest_Adapter(holder, this));
    modelContainerAdapters.put(SavingsAccountTransactionRequest.class, new SavingsAccountTransactionRequest_Container(holder, this));
    models.add(InterestType.class);
    modelTableNames.put("ClientTemplateInterest", InterestType.class);
    modelAdapters.put(InterestType.class, new InterestType_Adapter(holder, this));
    modelContainerAdapters.put(InterestType.class, new InterestType_Container(holder, this));
    models.add(LoanRepaymentRequest.class);
    modelTableNames.put("LoanRepaymentRequest", LoanRepaymentRequest.class);
    modelAdapters.put(LoanRepaymentRequest.class, new LoanRepaymentRequest_Adapter(holder, this));
    modelContainerAdapters.put(LoanRepaymentRequest.class, new LoanRepaymentRequest_Container(holder, this));
    models.add(DepositType.class);
    modelTableNames.put("SavingAccountDepositType", DepositType.class);
    modelAdapters.put(DepositType.class, new DepositType_Adapter(holder, this));
    modelContainerAdapters.put(DepositType.class, new DepositType_Container(holder, this));
  }

  @Override
  public final Class getAssociatedDatabaseClassFile() {
    return MifosDatabase.class;
  }

  @Override
  public final boolean isForeignKeysSupported() {
    return true;
  }

  @Override
  public final boolean isInMemory() {
    return false;
  }

  @Override
  public final boolean backupEnabled() {
    return false;
  }

  @Override
  public final boolean areConsistencyChecksEnabled() {
    return false;
  }

  @Override
  public final int getDatabaseVersion() {
    return 1;
  }

  @Override
  public final String getDatabaseName() {
    return "Mifos";
  }
}
